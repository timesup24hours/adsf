import request from 'supertest'

export default (app, test) => {
  test('# POST /api/addProduct # should upload product with images and body successfully', t => {
    request(app)
      .post('/api/addProduct')
      .set('x-access-token', app.get('token'))
      // .expect('Content-Type', /json/)
      // .set('Content-Type', 'application/x-www-form-urlencoded')
      // .type('form')
      .expect(201)
      .field('name', 'p1')
      .field('brand', 'pp')
      .field('desc', 'test desc')
      .field('listDesc', JSON.stringify(['1', '2']))
      .field('price', 12)
      .field('salePrice', 11)
      .field('onSale', true)
      .field('stock', 1)
      .field('numberOfStock', 2)
      .field('size', '1 per package')
      .field('department', 'Sport & Outdoors')
      .field('category', 'Hunting & Fishing')
      .field('type', 'Hunting')
      .field('soldBy', 'hh')
      .attach('image-1', '../frontend/public/images/test/1.png')
      .attach('image-2',  '../frontend/public/images/test/2.png')
      .end((err, res) => {
        const actualBody = res.body
        app.set('product1ID', actualBody.product._id)
        app.set('product1Category', actualBody.product.category)

        t.error(err, 'No error')
        t.ok(actualBody.success, 'Retrieved req.body.success property')
        t.ok(actualBody.product._id, 'Retrieved saved product with _id field')
        t.end()
      })
  })

  test('# POST /api/addProduct # should upload second product with images and body successfully', t => {
    request(app)
      .post('/api/addProduct')
      .set('x-access-token', app.get('token'))
      // .expect('Content-Type', /json/)
      // .set('Content-Type', 'application/x-www-form-urlencoded')
      // .type('form')
      .expect(201)
      .field('name', 'p2')
      .field('brand', 'pp2')
      .field('desc', 'test2 desc')
      .field('listDesc', JSON.stringify(['1', '2']))
      .field('price', 12)
      .field('salePrice', 11)
      .field('onSale', true)
      .field('stock', 1)
      .field('numberOfStock', 2)
      .field('size', '1 per package')
      .field('department', 'Sport & Outdoors')
      .field('category', 'Hunting & Fishing')
      .field('type', 'Hunting')
      .field('soldBy', 'hh')
      .attach('image-1', '../frontend/public/images/test/1.png')
      .attach('image-2',  '../frontend/public/images/test/2.png')
      .end((err, res) => {
        const actualBody = res.body
        app.set('product2ID', actualBody.product._id)

        t.error(err, 'No error')
        t.ok(actualBody.success, 'Retrieved req.body.success property')
        t.ok(actualBody.product._id, 'Retrieved saved product with _id field')
        t.end()
      })
  })

  test('# POST /api/addProduct # should not pass without images', t => {
    request(app)
      .post('/api/addProduct')
      .set('x-access-token', app.get('token'))
      .expect(400)
      .field('name', 'p1')
      .field('brand', 'pp')
      .field('desc', 'test desc')
      .field('listDesc', ['1', '2'])
      .field('price', 12)
      .field('salePrice', 11)
      .field('onSale', true)
      .field('stock', 1)
      .field('numberOfStock', 2)
      .field('size', '1 per package')
      .field('department', 'Sport & Outdoors')
      .field('category', 'Hunting & Fishing')
      .field('type', 'Hunting')
      .field('soldBy', 'hh')
      .end((err, res) => {
        const actualBody = res.body
        const expectedBody = { error: 'images if required' }

        t.error(err, 'No error')
        t.deepEqual(actualBody, expectedBody, 'Retrieved req.body.success property')
        t.end()
      })
  })

  test('# POST /api/addProduct # should not pass with invalide body', t => {
    request(app)
      .post('/api/addProduct')
      .set('x-access-token', app.get('token'))
      .expect(400)
      // .field('name', 123)
      .field('brand', 'pp')
      .field('desc', 'test desc')
      .field('listDesc', ['1', '2'])
      .field('price', 12)
      .field('salePrice', 11)
      .field('onSale', true)
      .field('stock', 1)
      .field('numberOfStock', 2)
      .field('size', '1 per package')
      .field('department', 'Sport & Outdoors')
      .field('category', 'Hunting & Fishing')
      .field('type', 'Hunting')
      .field('soldBy', 'hh')
      .attach('image-1', '../frontend/public/images/test/1.png')
      .attach('image-2',  '../frontend/public/images/test/2.png')
      .end((err, res) => {
        const actualBody = res.body
        const expectedBody = { error: 'invalided data' }

        t.error(err, 'No error')
        t.deepEqual(actualBody, expectedBody, 'Retrieved body')
        t.end()
      })
  })
}
